diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/README.md Exercises/Exercise_05/After/README.md
1c1
< ## Exercise 6: Starting Point ##
---
> ## Exercise 5: Result ##
3c3
< This folder contains the application as it is before you start with this exercise.
\ No newline at end of file
---
> This folder contains the application as it is after you have completed this exercise.
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/app/components/app.component.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/app/components/app.component.spec.ts
1,7d0
< /// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< describe('App', () => {
<     it('should have a proper test setup', () => {
<         expect(true).toBe(true);
<     });
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/app/components/home.component.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/app/components/home.component.spec.ts
1,41d0
< ﻿/// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< import { ComponentFixture, TestBed } from '@angular/core/testing';
< import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
< import { By } from '@angular/platform-browser';
< 
< import { HomeComponent } from './home.component';
< 
< describe('The HomeComponent', () => {
< 
<     let homeComponent: HomeComponent;
<     let fixture: ComponentFixture<HomeComponent>;
<     let pageTitle: HTMLElement;
< 
<     beforeAll(()=>{
<         TestBed.resetTestEnvironment();
<         TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
<     });
< 
<     beforeEach(() => {
<         TestBed.configureTestingModule({
<             declarations: [HomeComponent]
<         });
< 
<         fixture = TestBed.createComponent(HomeComponent);
<         homeComponent = fixture.componentInstance;
< 
<         pageTitle = fixture.debugElement.query(By.css('.panel-heading')).nativeElement;
<     });
< 
<     it('should display original title', () => {
<         fixture.detectChanges();
<         expect(pageTitle.textContent).toContain(homeComponent.pageTitle);
<     });
< 
<     it('should display a different test title', () => {
<         homeComponent.pageTitle = 'Test Title';
<         fixture.detectChanges();
<         expect(pageTitle.textContent).toContain('Test Title');
<     });
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-add.component.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-add.component.spec.ts
1,75d0
< ﻿/// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< import { ComponentFixture, TestBed, inject } from '@angular/core/testing';
< import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
< import { RouterTestingModule } from '@angular/router/testing';
< import { Router } from '@angular/router';
< import { FormsModule } from '@angular/forms';
< import { HttpModule } from '@angular/http';
< import { By } from '@angular/platform-browser';
< import { BehaviorSubject } from 'rxjs/BehaviorSubject';
< 
< import { RouterStub } from '../../../utils/testutils';
< 
< import { ExpenseAddComponent } from './expense-add.component';
< import { ExpenseFormComponent } from './expense-form.component';
< import { ExpenseService } from '../services/expense.service';
< import { ExpenseRecord, ExpenseReason } from '../model/expense';
< 
< describe('The ExpenseDetailComponent', () => {
< 
<     let expenseAddComponent: ExpenseAddComponent;
<     let fixture: ComponentFixture<ExpenseAddComponent>;
<     let expenseService: ExpenseService;
< 
<     const newExpense = new ExpenseRecord(null, 'Palpatine', ExpenseReason.Hotel, new Date('1999/1/12'), 54.00, 'Reasoning about the dark side of the force');
< 
<     beforeAll(()=>{
<         TestBed.resetTestEnvironment();
<         TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
<     });
< 
<     beforeEach(() => {
<         TestBed.configureTestingModule({
<             imports: [FormsModule, RouterTestingModule, HttpModule],
<             declarations: [ExpenseAddComponent, ExpenseFormComponent],
<             providers: [ExpenseService, { provide: Router, useClass: RouterStub }]
<         });
< 
<         fixture = TestBed.createComponent(ExpenseAddComponent);
<         expenseAddComponent = fixture.componentInstance;
< 
<         expenseService = fixture.debugElement.injector.get(ExpenseService);
<     });
< 
<     it('should navigate to overview when back button is clicked', inject([Router], (router: Router) => {
<         const routerSpy = spyOn(router, 'navigate');
<         fixture.detectChanges();
< 
<         const backButton = fixture.debugElement.query(By.css('.btn-default'));
<         backButton.triggerEventHandler('click', null);
< 
<         const routerArguments = routerSpy.calls.first().args[0];
<         expect(routerArguments).toEqual(['/expense']);
<     }));
< 
<     it('should create a new expense if the save button was clicked', inject([Router], async (router: Router) => {
<         spyOn(expenseService, 'updateExpense').and.returnValue(Promise.resolve());
<         spyOn(expenseService, 'createExpense').and.returnValue(Promise.resolve());
<         const routerSpy = spyOn(router, 'navigate');
<         
<         expenseAddComponent.expense = newExpense;
<         fixture.detectChanges();
< 
<         const saveButton = fixture.debugElement.query(By.css('.btn-primary'));
<         saveButton.triggerEventHandler('click', null); //trigger a save
< 
<         await fixture.whenStable();
<         expect(expenseService.createExpense).toHaveBeenCalledTimes(1);
<         expect(expenseService.createExpense).toHaveBeenCalledWith(newExpense);
<         expect(expenseService.updateExpense).not.toHaveBeenCalled();
< 
<         const routerArguments = routerSpy.calls.first().args[0]; //check that router was called with overview route
<         expect(routerArguments).toEqual(['/expense']);
<     }));
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.spec.ts
1,99d0
< ﻿/// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< import { ComponentFixture, TestBed, inject } from '@angular/core/testing';
< import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
< 
< import { RouterTestingModule } from '@angular/router/testing';
< import { ActivatedRoute, Router } from '@angular/router';
< import { FormsModule } from '@angular/forms';
< import { HttpModule } from '@angular/http';
< import { By } from '@angular/platform-browser';
< 
< import { ActivatedRouteStub, RouterStub } from '../../../utils/testutils';
< 
< import { ExpenseDetailComponent } from './expense-detail.component';
< import { ExpenseFormComponent } from './expense-form.component';
< import { ExpenseService } from '../services/expense.service';
< import { ExpenseRecord, ExpenseReason } from '../model/expense';
< 
< describe('The ExpenseDetailComponent', () => {
< 
<     let expenseDetailComponent: ExpenseDetailComponent;
<     let fixture: ComponentFixture<ExpenseDetailComponent>;
<     let expenseService: ExpenseService;
<     const activatedRoute = new ActivatedRouteStub();
< 
<     const expense1 = new ExpenseRecord('00000000-0000-0000-0000-000000000001', 'Anakin Skywalker', ExpenseReason.Bus, new Date('2016/1/12'), 12.22, 'Visiting Mom');
<     const expense2 = new ExpenseRecord('00000000-0000-0000-0000-000000000002', 'Yoda', ExpenseReason.Flight, new Date('2016/5/12'), 10, 'Flight to Coruscant');
<     const testExpenses = [expense1, expense2];
< 
<     beforeAll(() => {
<         TestBed.resetTestEnvironment();
<         TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
<     });
< 
<     beforeEach(() => {
<         TestBed.configureTestingModule({
<             imports: [FormsModule, RouterTestingModule, HttpModule],
<             declarations: [ExpenseDetailComponent, ExpenseFormComponent],
<             providers: [ExpenseService, { provide: ActivatedRoute, useValue: activatedRoute }, { provide: Router, useClass: RouterStub }]
<         });
< 
<         fixture = TestBed.createComponent(ExpenseDetailComponent);
<         expenseDetailComponent = fixture.componentInstance;
< 
<         expenseService = fixture.debugElement.injector.get(ExpenseService);
<     });
< 
<     it('should load the correct expense', async () => {
<         spyOn(expenseService, 'getExpense').and.returnValue(Promise.resolve(expense1));
<         activatedRoute.testParams = { id: expense1.id };
< 
<         fixture.detectChanges();
<         await fixture.whenStable();
< 
<         expect(expenseDetailComponent.expense).toEqual(expense1);
<         
<         fixture.detectChanges();
<         await fixture.whenStable();
< 
<         const title = fixture.debugElement.query(By.css('.panel-heading')).nativeElement;
<         expect(title.textContent).toEqual('Receipt from ' + expense1.name);
<     });
< 
<     it('should navigate to overview when back button is clicked', inject([Router], async (router: Router) => {
<         const routerSpy = spyOn(router, 'navigate');
<         expenseDetailComponent.expense = expense1;
< 
<         fixture.detectChanges();
<      
<         const backButton = fixture.debugElement.query(By.css('.btn-default'));
<         backButton.triggerEventHandler('click', null);
<         
<         const routerArguments = routerSpy.calls.first().args[0];
<         expect(routerArguments).toEqual(['/expense']);
<     }));
< 
<     it('should update an expense if the save button was clicked', inject([Router], async (router: Router) => {
<         const routerSpy = spyOn(router, 'navigate');
<         const updateSpy = spyOn(expenseService, "updateExpense");
<         const createSpy = spyOn(expenseService, "createExpense");
<         expenseDetailComponent.expense = expense1;
< 
<         fixture.detectChanges();
< 
<         const saveButton = fixture.debugElement.query(By.css('.btn-primary'));
<         saveButton.triggerEventHandler('click', null); //trigger a save
< 
<         fixture.detectChanges();
<         await fixture.whenStable();
<         
<         expect(updateSpy).toHaveBeenCalledTimes(1);
<         expect(updateSpy).toHaveBeenCalledWith(expense1);
< 
<         expect(createSpy).not.toHaveBeenCalled();
< 
<         const routerArguments = routerSpy.calls.first().args[0]; //check that router was called with overview route
<         expect(routerArguments).toEqual(['/expense']);
<     }));
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.e2e.spec.js Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.e2e.spec.js
1,11d0
< ﻿describe('Expense overview list', function () {
< 
<     it('should should have Anakin Skywalker as first entry', function () {
<         browser.get('/home');
<         expect(browser.getTitle()).toEqual('Angular 2 Workshop');
< 
<         browser.get('/expense');
< 
<         expect(element(by.id('00000000-0000-0000-0000-000000000001')).getText()).toEqual('ANAKIN SKYWALKER');
<     });
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.spec.ts
1,74d0
< ﻿/// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< import { ComponentFixture, TestBed } from '@angular/core/testing';
< import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
< import { RouterTestingModule } from '@angular/router/testing';
< import { FormsModule } from '@angular/forms';
< import { HttpModule } from '@angular/http';
< 
< import { By } from '@angular/platform-browser';
< 
< import { ExpenseOverviewComponent } from './expense-overview.component';
< import { ExpenseFilterPipe } from '../pipes/expense-filter.pipe';
< import { ExpenseService } from '../services/expense.service';
< import { ExpenseRecord, ExpenseReason } from '../model/expense';
< 
< describe('The ExpenseOverviewComponent', () => {
< 
<     let expenseOverviewComponent: ExpenseOverviewComponent;
<     let fixture: ComponentFixture<ExpenseOverviewComponent>;
<     let expenseService: ExpenseService;
< 
<     const expense1 = new ExpenseRecord('1', 'Anakin Skywalker', ExpenseReason.Bus, new Date('2016/1/12'), 12.22, 'Visiting Mom');
<     const expense2 = new ExpenseRecord('2', 'Yoda', ExpenseReason.Flight, new Date('2016/5/12'), 10, 'Flight to Coruscant');
<     const testExpenses = [expense1, expense2];
< 
<     beforeAll(() => {
<         TestBed.resetTestEnvironment();
<         TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
<     });
< 
<     beforeEach(() => {
<         TestBed.configureTestingModule({
<             imports: [
<                 FormsModule,
<                 RouterTestingModule,
<                 HttpModule
<             ],
<             declarations: [
<                 ExpenseOverviewComponent,
<                 ExpenseFilterPipe
<             ],
<             providers: [
<                 ExpenseService
<             ]
<         });
< 
<         fixture = TestBed.createComponent(ExpenseOverviewComponent);
<         expenseOverviewComponent = fixture.componentInstance;
< 
<         expenseService = fixture.debugElement.injector.get(ExpenseService);
<     });
< 
<     it('should not show expenses before OnInit', () => {
<         spyOn(expenseService, 'getExpenses').and.returnValue(Promise.resolve(testExpenses));
<         expect(expenseService.getExpenses).not.toHaveBeenCalled();
<     });
< 
<     it('should show two expenses after OnInit', async () => {
<         spyOn(expenseService, 'getExpenses').and.returnValue(Promise.resolve(testExpenses));
< 
<         fixture.detectChanges();
<         await fixture.whenStable();
< 
<         expect(expenseService.getExpenses).toHaveBeenCalledTimes(1);
<         
<         fixture.detectChanges();
<         await fixture.whenStable();
< 
<         const tableBody = fixture.debugElement.query(By.css('tbody'));
<         expect(tableBody.nativeElement.children.length).toEqual(2);
<         expect(tableBody.nativeElement.children[0].children[0].textContent).toContain('ANAKIN SKYWALKER');
<         expect(tableBody.nativeElement.children[1].children[0].textContent).toContain('YODA');
<     });
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/pipes/expense-filter.pipe.spec.ts Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/pipes/expense-filter.pipe.spec.ts
1,16d0
< ﻿/// <reference path="../../../../node_modules/@types/jasmine/index.d.ts" />
< 
< import { ExpenseFilterPipe } from './expense-filter.pipe';
< import { ExpenseRecord, ExpenseReason } from '../model/expense';
< 
< describe('ExpenseFilterPipe', () => {
<     const pipe = new ExpenseFilterPipe();
< 
<     it('should filter out expenses that do not include <<Ana>>', () => {
<         const expense1 = new ExpenseRecord('1', 'Anakin Skywalker', ExpenseReason.Hotel, new Date('2016/10/11'), 12.20, 'Night on Coruscant with Obi Wan');
<         const expense2 = new ExpenseRecord('1', 'Obi Wan', ExpenseReason.Hotel, new Date('2016/10/12'), 12.20, 'Night on Coruscant with Anakin');
<         const expenses = [expense1, expense2];
< 
<         expect(pipe.transform(expenses, 'Ana')[0]).toEqual(expense1); //check that only Anakin Skywalker is returned
<     });
< });
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/karma.conf.js Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/karma.conf.js
1,26d0
< // Karma configuration file, see link for more information
< // https://karma-runner.github.io/0.13/config/configuration-file.html
< 
< module.exports = function (config) {
<     config.set({
<         basePath: '.',
<         frameworks: ['jasmine'],
<         files: [
<             './wwwroot/dist/vendor.js',
<             './ClientApp/boot-tests.ts'
<         ],
<         preprocessors: {
<             './ClientApp/boot-tests.ts': ['webpack']
<         },
<         reporters: ['progress'],
<         port: 9876,
<         colors: true,
<         logLevel: config.LOG_INFO,
<         autoWatch: true,
<         browsers: ['Chrome'],
<         mime: { 'application/javascript': ['ts','tsx'] },
<         singleRun: false,
<         webpack: require('./webpack.config.js')().filter(config => config.target !== 'node'), // Test against client bundle, because tests run in a browser
<         webpackMiddleware: { stats: 'errors-only' }
<     });
< };
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting/protractor.conf.js Exercises/Exercise_05/After/Zuehlke.ExpenseReporting/protractor.conf.js
1,6d0
< ﻿exports.config = {
<     specs: ['**/*.e2e.spec.js'],
<     useAllAngular2AppRoots: true,
<     baseUrl: 'http://localhost:5000/',
<     directConnect : true
< };
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting.Test/ExpenseControllerTests.cs Exercises/Exercise_05/After/Zuehlke.ExpenseReporting.Test/ExpenseControllerTests.cs
1,327d0
< ﻿using System;
< using System.Collections.Generic;
< using System.Linq;
< using System.Net;
< using FluentAssertions;
< using Microsoft.AspNetCore.Mvc;
< using Moq;
< using Xunit;
< using Zuehlke.ExpenseReporting.Controllers;
< using Zuehlke.ExpenseReporting.Data;
< 
< namespace Zuehlke.ExpenseReporting.Test
< {
<     public class ExpenseControllerTests
<     {
<         /// <summary>
<         /// Ensures that the controllers returns a HTTP 200 result containung all
<         /// instances available in the database.
<         /// </summary>
<         [Fact]
<         public void CanDeliverAllExpenseRecords()
<         {
<             var testData = this.CreateTestData();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.All()).Returns(testData);
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject.Invoking(x => { result = x.Get(); }).ShouldNotThrow();
<             result
<                 .Should()
<                 .BeOfType<OkObjectResult>();
< 
<             var okResult = result as OkObjectResult;
<             okResult.Value
<                 .Should()
<                 .BeOfType<ExpenseRecord[]>();
< 
<             var resultValue = okResult.Value as IEnumerable<ExpenseRecord>;
<             resultValue
<                 .Should()
<                 .HaveCount(5);
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 200 result containing the
<         /// requested expense record.
<         /// </summary>
<         /// <param name="recordId">Unique id of the requested expense record.</param>
<         [Theory]
<         [InlineData("00000000-0000-0000-0000-000000000001")]
<         [InlineData("00000000-0000-0000-0000-000000000002")]
<         [InlineData("00000000-0000-0000-0000-000000000003")]
<         [InlineData("00000000-0000-0000-0000-000000000004")]
<         [InlineData("00000000-0000-0000-0000-000000000005")]
<         public void CanDeliverASingleExpeseRecord(string recordId)
<         {
<             var testRecord = this.CreateTestData().FirstOrDefault(x => x.Id.Equals(Guid.Parse(recordId)));
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.FindById(testRecord.Id)).Returns(testRecord);
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => { result = x.GetById(testRecord.Id); })
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<OkObjectResult>();
< 
<             var okResult = result as OkObjectResult;
<             okResult.Value
<                 .Should()
<                 .BeOfType<ExpenseRecord>();
< 
<             var resultValue = okResult.Value as ExpenseRecord;
<             resultValue
<                 .ShouldBeEquivalentTo(testRecord);
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 404 result if the requested
<         /// expense record is not available.
<         /// </summary>
<         [Fact]
<         public void DoesNotFailIfRecordDoesNotExist()
<         {
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.FindById(Guid.Empty)).Returns((ExpenseRecord)null);
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => { result = x.GetById(Guid.Empty); })
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<NotFoundResult>();
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 201 result containing the
<         /// uri of the newly created resource.
<         /// </summary>
<         [Fact]
<         public void CanAddRecord()
<         {
<             var testRecord = this.CreateTestData().First();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Post(testRecord))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Create(testRecord)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<CreatedResult>();
< 
<             var createdResult = result as CreatedResult;
<             createdResult
<                 .Location
<                 .Should()
<                 .Be($"api/expenses/{testRecord.Id}");
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 400 result if the
<         /// user has provided bad data to the request.
<         /// </summary>
<         [Fact]
<         public void ThrowsArgumentNullExceptionWhenTryingToAddRecordWithoutPassingRecord()
<         {
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.Create(null)).Throws(new ArgumentNullException("record"));
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Post(null))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Create(null)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<BadRequestResult>();
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 409 result if the user
<         /// user has provided a record that already exists in the database.
<         /// </summary>
<         [Fact]
<         public void ThrowsInvalidOperationExceptionWhenTryingToAddRecordThatAlreadyExists()
<         {
<             var testRecord = this.CreateTestData().First();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.Create(testRecord)).Throws(new InvalidOperationException($"An expense record with ID {testRecord.Id} already exists in the database!"));
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Post(testRecord))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Create(testRecord)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<StatusCodeResult>();
<             var statusCodeResult = result as StatusCodeResult;
<             statusCodeResult.StatusCode
<                 .Should()
<                 .Be((int)HttpStatusCode.Conflict);
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 204 if a resource has been
<         /// deleted successfully.
<         /// </summary>
<         [Fact]
<         public void CanDeleteRecord()
<         {
<             var testRecord = this.CreateTestData().First();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.FindById(testRecord.Id)).Returns(testRecord);
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Delete(testRecord.Id))
<                 .ShouldNotThrow();
<             result
<                 .Should()
<                 .BeOfType<NoContentResult>();
< 
<             repositoryMock.Verify(mock => mock.Delete(testRecord.Id), Times.Exactly(1));
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 204 if a resource has been
<         /// deleted successfully.
<         /// </summary>
<         [Fact]
<         public void CanNotDeleteMissingRecord()
<         {
<             var id = Guid.Parse("00000000-0000-0000-0000-000000000006");
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.Delete(id)).Throws(new InvalidOperationException($"An expense record with ID {id} does not exist in the database!"));
< 
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Delete(id))
<                 .ShouldNotThrow();
<             result
<                 .Should()
<                 .BeOfType<NotFoundResult>();
< 
<             repositoryMock.Verify(mock => mock.Delete(id), Times.Exactly(1));
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 204 result containing the
<         /// uri of the newly created resource.
<         /// </summary>
<         [Fact]
<         public void CanUpdateRecord()
<         {
<             var testRecord = this.CreateTestData().First();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Put(testRecord))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Update(testRecord)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<NoContentResult>();
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 400 result if the
<         /// user has provided bad data to the request.
<         /// </summary>
<         [Fact]
<         public void ThrowsArgumentNullExceptionWhenTryingToUpdateRecordWithoutPassingRecord()
<         {
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.Update(null)).Throws(new ArgumentNullException("record"));
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Put(null))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Update(null)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<BadRequestResult>();
<         }
< 
<         /// <summary>
<         /// Ensures that the controller returns a HTTP 404 result if the user
<         /// user has provided a record that does not exist in the database.
<         /// </summary>
<         [Fact]
<         public void ThrowsInvalidOperationExceptionWhenTryingToUpdateARecordThatDoesNotExist()
<         {
<             var testRecord = this.CreateTestData().First();
<             var repositoryMock = new Mock<IExpenseRepository>();
<             repositoryMock.Setup(x => x.Update(testRecord)).Throws(new InvalidOperationException($"An expense record with ID {testRecord.Id} does not exist in the database!"));
<             var subject = new ExpenseController(repositoryMock.Object);
< 
<             IActionResult result = null;
<             subject
<                 .Invoking(x => result = x.Put(testRecord))
<                 .ShouldNotThrow();
< 
<             repositoryMock
<                 .Invoking(mock => mock.Verify(x => x.Update(testRecord)))
<                 .ShouldNotThrow();
< 
<             result
<                 .Should()
<                 .BeOfType<NotFoundResult>();
<         }
< 
<         /// <summary>
<         /// Creates a set of test records.
<         /// </summary>
<         /// <returns>An array of expense records.</returns>
<         private ExpenseRecord[] CreateTestData()
<         {
<             return new[] {
<                 new ExpenseRecord { Id = Guid.Parse("00000000-0000-0000-0000-000000000001"), Date = 11.October(2016), Name = "Anakin Skywalker", Reason = ExpenseReason.Flight, Text = "Flight to Tatooine, visiting Mom", Amount = 122.99m },
<                 new ExpenseRecord { Id = Guid.Parse("00000000-0000-0000-0000-000000000002"), Date = 12.October(2016), Name = "Padme Amidala", Reason = ExpenseReason.Flight, Text = "Flight to Tatooine, visiting Annie's Mom", Amount = 122.99m },
<                 new ExpenseRecord { Id = Guid.Parse("00000000-0000-0000-0000-000000000003"), Date = 13.October(2016), Name = "Obi-Wan Kenobi", Reason = ExpenseReason.Other, Text = "New Lightsabre", Amount = 3999.99m },
<                 new ExpenseRecord { Id = Guid.Parse("00000000-0000-0000-0000-000000000004"), Date = 14.October(2016), Name = "The Dark Lord", Reason = ExpenseReason.Restaurant, Text = "I had the Penne a L'Arrabiata", Amount = 3.90m },
<                 new ExpenseRecord { Id = Guid.Parse("00000000-0000-0000-0000-000000000005"), Date = 15.October(2016), Name = "Jar Jar Binx", Reason = ExpenseReason.Restaurant, Text = "Apple", Amount = 0.2m }
<             };
<         }
<     }
< }
diff -Nr -X ./ignore_patterns Exercises/Exercise_06/Before/Zuehlke.ExpenseReporting.Test/ExpenseRepositoryTests.cs Exercises/Exercise_05/After/Zuehlke.ExpenseReporting.Test/ExpenseRepositoryTests.cs
1,212d0
< ﻿using System;
< using System.Linq;
< using FluentAssertions;
< using Xunit;
< using Zuehlke.ExpenseReporting.Data;
< 
< namespace Zuehlke.ExpenseReporting.Test
< {
<     public class ExpenseRepositoryTests
<     {
<         /// <summary>
<         /// Ensures that the repository is able to deliver all records from the database.
<         /// </summary>
<         [Fact]
<         public void CanDeliverAllExpenseRecords()
<         {
<             var subject = new ExpenseRepository();
< 
<             ExpenseRecord[] allExpenseReports = null;
<             subject
<                 .Invoking(x => { allExpenseReports = x.All().ToArray(); })
<                 .ShouldNotThrow();
< 
<             allExpenseReports.Should().HaveCount(5, "there are five elements in the database after initialization");
<             allExpenseReports[0].Name.Should().Be("Anakin Skywalker");
<             allExpenseReports[1].Name.Should().Be("Padme Amidala");
<             allExpenseReports[2].Name.Should().Be("Obi-Wan Kenobi");
<             allExpenseReports[3].Name.Should().Be("The Dark Lord");
<             allExpenseReports[4].Name.Should().Be("Jar Jar Binx");
<         }
< 
<         /// <summary>
<         /// Ensures that the repository can fetch on record that is identified by its unique id from the database.
<         /// </summary>
<         /// <param name="recordId">Id of the record to be fetched</param>
<         [Theory]
<         [InlineData("00000000-0000-0000-0000-000000000001")]
<         [InlineData("00000000-0000-0000-0000-000000000002")]
<         [InlineData("00000000-0000-0000-0000-000000000003")]
<         [InlineData("00000000-0000-0000-0000-000000000004")]
<         [InlineData("00000000-0000-0000-0000-000000000005")]
<         public void CanDeliverASingleExpeseRecord(string recordId)
<         {
<             var subject = new ExpenseRepository();
<             subject
<                 .FindById(Guid.Parse(recordId))
<                 .Should().NotBeNull();
<         }
< 
<         /// <summary>
<         /// Ensures that that the <see cref="ExpenseRepository.FindById"/> method does not fail if
<         /// the requested record was not found.
<         /// </summary>
<         [Fact]
<         public void DoesNotFailIfRecordDoesNotExist()
<         {
<             var subject = new ExpenseRepository();
<             subject
<                 .Invoking(x => x.FindById(Guid.Parse("00000000-0000-0000-0000-000000000000")))
<                 .ShouldNotThrow();
<         }
< 
<         /// <summary>
<         /// Ensures that a record can be added to the database.
<         /// </summary>
<         [Fact]
<         public void CanAddRecord()
<         {
<             var subject = new ExpenseRepository();
<             var newRecord = new ExpenseRecord
<             {
<                 Id = Guid.Parse("00000000-0000-0000-0000-000000000006"),
<                 Name = "Anakin Skywalker",
<                 Reason = ExpenseReason.Hotel,
<                 Amount = 20m,
<                 Text = "Cheap hotel in Mom's guest room.",
<                 Date = 6.October(2016)
<             };
<             subject
<                 .Invoking(x => x.Create(newRecord))
<                 .ShouldNotThrow();
<             subject
<                 .FindById(newRecord.Id)
<                 .ShouldBeEquivalentTo(newRecord);
<         }
< 
<         /// <summary>
<         /// Ensures that the <see cref="ExpenseRepository.Create"/> method throws an appropriate
<         /// exception should the user fail to provide a record to be added.
<         /// </summary>
<         [Fact]
<         public void ThrowsArgumentNullExceptionWhenTryingToAddRecordWithoutPassingRecord()
<         {
<             var subject = new ExpenseRepository();
<             subject
<                 .Invoking(x => x.Create(null))
<                 .ShouldThrow<ArgumentNullException>()
<                 .Where(x => x.ParamName == "record");
<         }
< 
<         /// <summary>
<         /// Ensures that the <see cref="ExpenseRepository.Create"/> method throws an appropriate
<         /// exception should the user try to add a record that is already available in the database.
<         /// </summary>
<         [Fact]
<         public void ThrowsInvalidOperationExceptionWhenTryingToAddRecordThatAlreadyExists()
<         {
<             var subject = new ExpenseRepository();
<             var newRecord = new ExpenseRecord
<             {
<                 Id = Guid.Parse("00000000-0000-0000-0000-000000000005"),
<                 Name = "Anakin Skywalker",
<                 Reason = ExpenseReason.Hotel,
<                 Amount = 20m,
<                 Text = "Cheap hotel in Mom's guest room.",
<                 Date = 6.October(2016)
<             };
<             subject
<                 .Invoking(x => x.Create(newRecord))
<                 .ShouldThrow<InvalidOperationException>()
<                 .WithMessage($"An expense record with ID {newRecord.Id} already exists in the database!");
<         }
< 
<         /// <summary>
<         /// Ensures that a record can be removed from the database.
<         /// </summary>
<         [Fact]
<         public void CanDeleteRecord()
<         {
< 
<             // TODO Exercise 6
< 
<         }
< 
<         /// <summary>
<         /// Ensures that the <see cref="ExpenseRepository.Delete"/> method throws an appropriate
<         /// exception should the user try to delete a record that does not exist in the database.
<         /// </summary>
<         [Fact]
<         public void ThrowsInvalidOperationExceptionWhenTryingToDeleteRecordThatDoesNotExist()
<         {
<             var id = Guid.Parse("00000000-0000-0000-0000-000000000006");
<             var subject = new ExpenseRepository();
<             subject
<                 .Invoking(x => x.Delete(id))
<                 .ShouldThrow<InvalidOperationException>()
<                 .WithMessage($"An expense record with ID {id} does not exist in the database!");
<         }
< 
<         /// <summary>
<         /// Ensures that a record can be updated in the database.
<         /// </summary>
<         [Fact]
<         public void CanUpdateRecord()
<         {
<             var subject = new ExpenseRepository();
<             var updatedRecord = new ExpenseRecord
<             {
<                 Id = Guid.Parse("00000000-0000-0000-0000-000000000001"),
<                 Date = 12.October(2016),
<                 Name = "Anakin Skywalker",
<                 Reason = ExpenseReason.Taxi,
<                 Text = "Taxi to Tatooine, visiting Mom",
<                 Amount = 12.5m
<             };
< 
<             subject
<                 .Invoking(x => x.Update(updatedRecord))
<                 .ShouldNotThrow();
<             subject
<                 .FindById(updatedRecord.Id)
<                 .ShouldBeEquivalentTo(updatedRecord);
<         }
< 
<         /// <summary>
<         /// Ensures that the <see cref="ExpenseRepository.Update"/> method throws an appropriate
<         /// exception should the user fail to provide a record to be update.
<         /// </summary>
<         [Fact]
<         public void ThrowsArgumentNullExceptionWhenTryingToUpdateRecordWithoutPassingRecord()
<         {
<             var subject = new ExpenseRepository();
<             subject
<                 .Invoking(x => x.Update(null))
<                 .ShouldThrow<ArgumentNullException>()
<                 .Where(x => x.ParamName == "record");
<         }
< 
<         /// <summary>
<         /// Ensures that the <see cref="ExpenseRepository.Update"/> method throws an appropriate
<         /// exception should the user try to update a record that does not exist in the database.
<         /// </summary>
<         [Fact]
<         public void ThrowsInvalidOperationExceptionWhenTryingToUpdateRecordThatDoesNotExist()
<         {
<             var subject = new ExpenseRepository();
<             var updatedRecord = new ExpenseRecord
<             {
<                 Id = Guid.Parse("00000000-0000-0000-0000-000000000006"),
<                 Date = 12.October(2016),
<                 Name = "Anakin Skywalker",
<                 Reason = ExpenseReason.Taxi,
<                 Text = "Taxi to Tatooine, visiting Mom",
<                 Amount = 12.5m
<             };
<             subject
<                 .Invoking(x => x.Update(updatedRecord))
<                 .ShouldThrow<InvalidOperationException>()
<                 .WithMessage($"An expense record with ID {updatedRecord.Id} does not exist in the database!");
<         }
<     }
< }
