diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/README.md Exercises/Exercise_04/Before/README.md
1c1
< ## Exercise 4: Result ##
---
> ## Exercise 4: Starting Point ##
3c3
< This folder contains the application as it is after you have completed this exercise.
\ No newline at end of file
---
> This folder contains the application as it is before you start with this exercise.
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.html Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.html
7c7
<         <expense-form [expense]="expense"></expense-form>
---
> 
10,13c10
<         <div class="btn-group">
<             <a class="btn btn-default" (click)="goBack()"><i class="glyphicon glyphicon-chevron-left"></i> Back to Overview</a>
<             <a class="btn btn-primary" (click)="saveExpense()"><i class="glyphicon glyphicon-save"></i> Save expense</a>
<         </div>
---
>         <a class="btn btn-default" (click)="goBack()"><i class="glyphicon glyphicon-chevron-left"></i> Back to Overview</a>
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.ts Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-detail.component.ts
32,40d31
<     async saveExpense(): Promise<any> {
<         try {
<             await this.expenseService.updateExpense(this.expense);
<             this.goBack();
<         } catch (response) {
<             this.handleError(response);
<         }
<     }
< 
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-form.component.html Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-form.component.html
17,22d16
<     <div class="form-group">
<         <label for="text" class="col-sm-1 control-label">Text</label>
<         <div class="col-sm-11">
<             <textarea [(ngModel)]="expense.text" rows="2" required type="text" class="form-control" id="text" name="text" placeholder="Text"></textarea>
<         </div>
<     </div>
24,32c18,20
<     <div class="form-group">
<         <label for="amount" class="col-sm-1 control-label">Amount</label>
<         <div class="col-sm-4">
<             <div class="input-group">
<                 <span class="input-group-addon">&euro;</span>
<                 <input [(ngModel)]="expense.amount" required type="number" step="0.01" class="form-control" id="amount" name="amount" />
<             </div>
<         </div>
<     </div>
---
> 
> 
> 
38c26,28
<                 <option *ngFor="let reason of reasons" [selected]="expense.reason === reason" [value]="reason">{{reason}}</option>
---
>                 <option [selected]="expense.reason === 'Flight'" [value]="'Flight'">Flight</option>
> 
> 
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-form.component.ts Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-form.component.ts
5c5
< import { ExpenseRecord, ExpenseReason } from '../model/expense';
---
> import { ExpenseRecord } from '../model/expense';
17,25d16
<     get reasons() {
<         let availableReasons = [];
<         for (var property in ExpenseReason) {
<             if (ExpenseReason.hasOwnProperty(property) && !isNaN(parseInt(property))) {
<                 availableReasons.push(ExpenseReason[property]);
<             }
<         }
<         return availableReasons;
<     }
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/services/expense.service.ts Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/services/expense.service.ts
28,32d27
<     updateExpense(expense: ExpenseRecord): Promise<Response> {
<         return this.http.put(`${this.expenseUrl}/${expense.id}`, expense)
<                         .toPromise();
<     }
< 
diff -Nr -X ./ignore_patterns Exercises/Exercise_04/After/Zuehlke.ExpenseReporting/Controllers/ExpenseController.cs Exercises/Exercise_04/Before/Zuehlke.ExpenseReporting/Controllers/ExpenseController.cs
3d2
< using System.Net;
58,84d56
<         /// Updates the provided expense record in the database.
<         /// </summary>
<         /// <param name="record">The record to be added.</param>
<         /// <returns>
<         /// HTTP 204 if the record was updated successfully, 
<         /// HTTP 400 if no record was present in the body of the request
<         /// or HTTP 404 if the record to be updated was not found in the database.
<         /// </returns>
<         [HttpPut("{id}")]
<         public IActionResult Put([FromBody]ExpenseRecord record)
<         {
<             try
<             {
<                 this.repository.Update(record);
<                 return this.NoContent();
<             }
<             catch (ArgumentNullException)
<             {
<                 return this.BadRequest();
<             }
<             catch (InvalidOperationException)
<             {
<                 return this.NotFound();
<             }
<         }
< 
<         /// <summary>
