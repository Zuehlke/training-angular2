diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/README.md Exercises/Exercise_02/Before/README.md
1c1
< ## Exercise 2: Result ##
---
> ## Exercise 2: Starting Point ##
3c3
< This folder contains the application as it is after you have completed this exercise.
\ No newline at end of file
---
> This folder contains the application as it is before you start with this exercise.
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.html Exercises/Exercise_02/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.html
3c3
<     <table class="table" *ngIf="expenses && expenses.length">
---
>     <table class="table">
13,17c13,17
<             <tr *ngFor="let expense of expenses">
<                 <td>{{ expense.name }}</td>
<                 <td>{{ expense.date }}</td>
<                 <td>{{ expense.amount }}</td>
<                 <td>{{ expense.reason }}</td>
---
>             <tr>
>                 <td>specific name</td>
>                 <td>specific date</td>
>                 <td>specific amount</td>
>                 <td>specific reason</td>
diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.ts Exercises/Exercise_02/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/components/expense-overview.component.ts
1,4c1
< import { Component, OnInit } from '@angular/core';
< 
< import { ExpenseRecord } from '../model/expense';
< import { ExpenseService } from '../services/expense.service';
---
> import { Component } from '@angular/core';
9,17c6
< export class ExpenseOverviewComponent implements OnInit {
< 
<     expenses: ExpenseRecord[];
< 
<     constructor(private expenseService: ExpenseService) { }
< 
<     async ngOnInit(): Promise<any> {
<         this.expenses = await this.expenseService.getExpenses();
<     }
---
> export class ExpenseOverviewComponent {
diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/expense.module.ts Exercises/Exercise_02/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/expense.module.ts
6d5
< import { ExpenseService } from './services/expense.service';
15,17d13
<     ],
<     providers: [
<         ExpenseService
diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/Zuehlke.ExpenseReporting/ClientApp/modules/expense/services/expense.service.ts Exercises/Exercise_02/Before/Zuehlke.ExpenseReporting/ClientApp/modules/expense/services/expense.service.ts
1,21d0
< import { Injectable } from '@angular/core';
< import { Http, Response } from '@angular/http';
< 
< import 'rxjs/add/operator/map';
< import 'rxjs/add/operator/toPromise';
< 
< import { ExpenseRecord } from '../model/expense';
< 
< @Injectable()
< export class ExpenseService {
< 
<     private expenseUrl = 'api/expenses';
< 
<     constructor(private http: Http) {}
< 
<     getExpenses(): Promise<ExpenseRecord[]> {
<         return this.http.get(this.expenseUrl)
<                         .map(response => response.json() || [])
<                         .toPromise();
<     }
< }
\ No newline at end of file
diff -Nr -X ./ignore_patterns Exercises/Exercise_02/After/Zuehlke.ExpenseReporting/Controllers/ExpenseController.cs Exercises/Exercise_02/Before/Zuehlke.ExpenseReporting/Controllers/ExpenseController.cs
1,35d0
< ï»¿using System.Collections.Generic;
< using Microsoft.AspNetCore.Mvc;
< using Zuehlke.ExpenseReporting.Data;
< 
< namespace Zuehlke.ExpenseReporting.Controllers
< {
<     /// <summary>
<     /// Handles all request regarding the expense records.
<     /// </summary>
<     [Route("api/expenses")]
<     public class ExpenseController : Controller
<     {
<         private readonly IExpenseRepository repository;
< 
<         /// <summary>
<         /// Initializes a new instance of the <see cref="ExpenseController"/> class.
<         /// </summary>
<         /// <param name="expenseRepository">The repository used to access the database.</param>
<         public ExpenseController(IExpenseRepository expenseRepository)
<         {
<             this.repository = expenseRepository;
<         }
< 
<         /// <summary>
<         /// Gets all expense records that are stored in the database.
<         /// </summary>
<         /// <returns>HTTP 200 with an array of <see cref="ExpenseRecord"/> entities in the body.</returns>
<         [HttpGet]
<         [Produces(typeof(IEnumerable<ExpenseRecord>))]
<         public IActionResult Get()
<         {
<             return this.Ok(this.repository.All());
<         }
<     }
< }
